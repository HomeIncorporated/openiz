-- OPEN IZ DATABASE CORE
-- COPYRIGHT (c) 2015, OPEN IZ
-- PORTIONS COPYRIGHT (C) 2015, FYFE SOFTWARE INC.
-- LICENSED UNDER THE APACHE 2.0 LICENSE

USE openiz;

-- PHOENETIC ALGORITHM TABLE
CREATE TABLE PhoneticAlgorithm
(
	PhoneticAlgorithmId NUMERIC(2) IDENTITY NOT NULL, -- THE ID FOR THE ALGORITHM
	Name VARCHAR(32) NOT NULL, -- THE NAME OF THE ALGORITHM
	HandlerClass VARCHAR(MAX) NOT NULL, -- THE HANDLER CLASS WHICH GENERATES THE CODE
	CONSTRAINT PK_PhoneticAlgorithm PRIMARY KEY (PhoneticAlgorithmId)
);

-- SECURITY TABLES
-- SECURITY USER IS PRIMARILY USED BY THE SECURITY SUBSYSTEM AND IS OFTEN LINKED TO A PERSON IN THE 
-- CLINICAL DATA CONTEXT
CREATE TABLE SecurityUser
(
	UserId UNIQUEIDENTIFIER NOT NULL DEFAULT NEWID(), -- THE UNIQUE IDENTIFIER FOR THE USER
	UserName VARCHAR(50) NOT NULL, -- THE NAME OF THE USER
	UserEmail VARCHAR(250) NOT NULL UNIQUE, -- THE PRIMARY EMAIL ADDRESS OF THE USER
	UserPassword VARCHAR(MAX) NOT NULL, -- THE PASSWORD OF THE USER
	FailedLoginAttempts INT NOT NULL DEFAULT 0, -- THE NUMBER OF FAILED LOGIN ATTEMPTS
	LastSuccessfulLogin DATETIME2, -- THE LAST TIME WHEN THE USER SUCCESSFULLLY LOGGED IN
	CreationTime DATETIME2 NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE TIME THE USER WAS CREATED
	ObsoletionTime DATETIME2, -- WHEN PRESENT, INDICATES THE DATE THE USER ACCOUNT IS NOT LONGER ACTIVE
	ObsoletedBy UNIQUEIDENTIFIER, -- THE USER WHO OBSOLETED THIS RECORD
	CONSTRAINT PK_SecurityUser PRIMARY KEY (UserId),
	CONSTRAINT FK_SecurityUserObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_SecurityUserObsoletedBy CHECK(ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL)
);

CREATE INDEX SecurityUserUserNameIdx ON SecurityUser(UserName);

-- CONCEPT TABLES
CREATE TABLE Concept
(
	ConceptId NUMERIC(10) IDENTITY NOT NULL, -- THE UNIQUE IDENTIFIER FOR THE CONCEPT
	IsSystemConcept BIT NOT NULL DEFAULT 0, -- WHEN TRUE, INDICATES THE CONCEPT IS A SYSTEM CONCEPT
	CONSTRAINT PK_Concept PRIMARY KEY (ConceptId)
);

CREATE TABLE ConceptClass
(
	ConceptClassId NUMERIC(2) IDENTITY NOT NULL, -- THE CONCEPT CLASSIFICATION ID
	Name VARCHAR(50) NOT NULL, -- THE NAME OF THE CONCEPT CLASSIFICATION
	Mnemonic VARCHAR(16) NOT NULL, -- THE MNEMONIC USED BY THE SYSTEM TO LOCATE CONCEPTS
	CONSTRAINT PK_ConceptClass PRIMARY KEY (ConceptClassId)
);

CREATE INDEX ConceptClassMnemonicIdx ON ConceptClass(Mnemonic);

CREATE TABLE ConceptVersion
(
	ConceptVersionId NUMERIC(10) IDENTITY NOT NULL, -- UNIQUE IDENTIFIER FOR THE CONCEPT VERSION
	ConceptId NUMERIC(10) NOT NULL, -- THE CONCEPT TO WHICH THE VERSION APPLIES
	CreationTime DATETIME2 NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE CREATION TIME OF THE CONCEPT VERSION
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER WHO CREATED THE VERSION
	ObsoletionTime DATETIME2, -- THE TIME WHEN THE CONCEPT VERSION IS OBSOLETE
	ObsoletedBy UNIQUEIDENTIFIER, -- THE USER WHO OBSOLETED THE DATA
	ReplacesVersionId NUMERIC(10), -- IDENTIFIES THE VERSION OF THAT THE CURRENT TUPLE REPLACES
	ConceptClassId NUMERIC(2), -- THE CLASSIFICATION OF THE CONCEPT AT THE VERSION
	CONSTRAINT PK_ConceptVersion PRIMARY KEY (ConceptVersionId),
	CONSTRAINT FK_ConceptVersionConcept FOREIGN KEY (ConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_ConceptVersionCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ConceptVersionObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ConceptVersionConceptClass FOREIGN KEY (ConceptClassId) REFERENCES ConceptClass(ConceptClassId),
	CONSTRAINT CK_ConceptVersionObsoletedBy CHECK(ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL)
);

CREATE INDEX ConceptVersionConceptId ON ConceptVersion(ConceptId);

CREATE TABLE ConceptName
(
	ConceptNameId NUMERIC(10) IDENTITY NOT NULL, -- UNIQUE IDENTIFIER FOR THE CONCEPT NAME ID
	EffectiveVersionId NUMERIC(10) NOT NULL, -- THE ID OF THE VERSION WHERE THIS CONCEPT NAME DID BECOME ACTIVE
	ObsoleteVersionId NUMERIC(10), -- THE ID OF THE VERSION WHERE THIS CONCEPT NAME IS NO LONGER ACTIVE
	LanguageCode VARCHAR(2) NOT NULL, -- THE LANGUAGE CODE OF THE NAME
	Name VARCHAR(MAX) NOT NULL, -- THE NAME OF THE CODE
	PhoneticCode VARCHAR(32) NOT NULL, -- THE PHONETIC CODE FOR THE CONCEPT NAME
	PhoneticAlgorithmId NUMERIC(2) NOT NULL, -- THE PHONETIC ALGORITHM USED TO GENERATE THE CODE
	CONSTRAINT PK_ConceptName PRIMARY KEY (ConceptNameId),
	CONSTRAINT FK_ConceptNameEffectiveVersionId FOREIGN KEY (EffectiveVersionId) REFERENCES ConceptVersion(ConceptVersionId),
	CONSTRAINT FK_ConceptNameObsoleteVersionId FOREIGN KEY (ObsoleteVersionId) REFERENCES ConceptVersion(ConceptVersionId),
	CONSTRAINT FK_ConceptNamePhoneticAlgorithmId FOREIGN KEY (PhoneticAlgorithmId) REFERENCES PhoneticAlgorithm(PhoneticAlgorithmId)
);

CREATE INDEX ConceptNameVersionIdx ON ConceptName(EffectiveVersionId, ObsoleteVersionId);
CREATE INDEX ConceptNameNameIdx ON ConceptName(Name);
CREATE INDEX ConceptNamePhoneticCodeIdx ON ConceptName(PhoneticCode, PhoneticAlgorithmId);

CREATE TABLE CodeSystem
(
	CodeSystemId NUMERIC(5) IDENTITY NOT NULL, -- THE UNIQUE IDENTIFIER FOR THE CODE SYSTEM
	Name VARCHAR(50) NOT NULL, -- HUMAN READABLE NAME FOR THE CODE SYSTEM
	Oid VARCHAR(64) NOT NULL, -- THE OID OF THE CODE SYSTEM
	Authority VARCHAR(50), -- THE ASSIGNING AUTHORITY OR ORGANIZATION
	CreationTime DATETIME2 NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE CREATIONTIME OF THE CODE SYSTEM
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER WHICH CREATED THIS CODE SYSTEM
	ObsoletionTime DATETIME2, -- WHEN PRESENT THE TIME THE RECORD WAS OBSOLETED
	ObsoletedBy UNIQUEIDENTIFIER, -- WHEN PRESENT INDICATES THE PERSON WHO OBSOLETED RECORD
	ObsoletionReason VARCHAR(MAX) , -- WHEN PRESENT INDICATES WHY THE RECORD WAS OBSOLETED
	Url VARCHAR(MAX) NOT NULL, -- THE URL OR URI TO THE CODE SYSTEM
	VersionText VARCHAR(10) NOT NULL, -- THE VERSION OF THE CODE SYSTEM
	CONSTRAINT PK_CodeSystem PRIMARY KEY (CodeSystemId),
	CONSTRAINT FK_CodeSystemCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_CodeSystemObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT CK_CodeSystemObsoletedBy CHECK(ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL),
	CONSTRAINT CK_CodeSystemObsoletionReason CHECK(ObsoletionReason IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletionTime IS NULL AND ObsoletionReason IS NULL)
);

CREATE INDEX CodeSystemOidIdx ON CodeSystem(Oid);
CREATE INDEX CodeSystemUrlIdx ON CodeSystem(Url);

CREATE TABLE RelationshipType
(
	RelationshipTypeId NUMERIC(2) IDENTITY NOT NULL, -- THE UNIQUE IDENTIFIER OF THE RELATIONSHIP
	Name VARCHAR(50) NOT NULL, -- THE NAME OF THE RELATIONSHIP TYPE
	Mnemonic VARCHAR(20) NOT NULL UNIQUE, -- THE UNCHANGING MNEMONIC OF THE RELATIONSHIP TYPE
	CONSTRAINT PK_RelationshipType PRIMARY KEY (RelationshipTypeId)
);

CREATE INDEX RelationshipTypeMnemonicIdx ON RelationshipType(Mnemonic);

CREATE TABLE ReferenceTerm
(
	ReferenceTermId NUMERIC(10) IDENTITY NOT NULL, -- THE UNIQUE IDENTIFIER FOR THE REFERENCE TERM
	CodeSystemId NUMERIC(5) NOT NULL, -- THE CODE SYSTEM TO WHICH THE REFERENCE TERM BELONGS
	Mnemonic VARCHAR(50) NOT NULL, -- THE MNEMONIC
	CONSTRAINT PK_ReferenceTerm PRIMARY KEY (ReferenceTermId),
	CONSTRAINT FK_ReferenceTermCodeSystemId FOREIGN KEY (CodeSystemId) REFERENCES CodeSystem(CodeSystemId)
);

CREATE INDEX ReferenceTermMnemonicIdx ON ReferenceTerm(Mnemonic);
CREATE INDEX ReferenceTermCodeSystemMnemonicIdx ON ReferenceTerm(CodeSystemId, Mnemonic);

CREATE TABLE ConceptReferenceTerm
(
	ConceptReferenceTermId NUMERIC(10) IDENTITY NOT NULL, -- THE UNIQUE IDENTIFIER OF THE REFERENCE TERM LINK
	ReferenceTermId  NUMERIC(10) NOT NULL, -- THE REFERENCE TERM
	EffectiveVersionId NUMERIC(10) NOT NULL, -- THE EFFECTIVE VERSION OF THE REFERENCE TERM
	ObsoleteVersionId NUMERIC(10) NOT NULL, -- THE OBSOLETION VERSION OF THE REFERENCE TERM
	RelationshipTypeId NUMERIC(2) NOT NULL, -- THE TYPE OF RELATIONSHIP,
	CONSTRAINT PK_ConceptReferenceTerm PRIMARY KEY (ConceptReferenceTermId),
	CONSTRAINT FK_ConceptReferenceTermReferenceTermId FOREIGN KEY (ReferenceTermId) REFERENCES ReferenceTerm(ReferenceTermId),
	CONSTRAINT FK_ConceptReferenceTermEffectiveVersionId FOREIGN KEY (EffectiveVersionId) REFERENCES ConceptVersion(ConceptVersionId),
	CONSTRAINT FK_ConceptReferenceTermObsoleteVersionId FOREIGN KEY (ObsoleteVersionId) REFERENCES ConceptVersion(ConceptVersionId),
	CONSTRAINT FK_ConceptReferenceTermRelationshipTypeId FOREIGN KEY (RelationshipTypeId) REFERENCES RelationshipType(RelationshipTypeId)
);

CREATE TABLE ReferenceTermDisplayName
(
	ReferenceTermDisplayNameId NUMERIC(10) IDENTITY NOT NULL, -- UNIQUE IDENTIFIER OF THE REFERENCE TERM LINK
	ReferenceTermId NUMERIC(10) NOT NULL, -- UNIQUE IDENTIFIER OF THE REFERENCE TERM
	LanguageCode VARCHAR(2) NOT NULL, -- LANGUAGE IN WHICH THE REFERENCE TERM IS REPRESENTED
	DisplayName VARCHAR(MAX) NOT NULL, -- THE DISPLAY NAME 
	CreationTime DATETIME2 NOT NULL DEFAULT CURRENT_TIMESTAMP, -- THE CREATION TIME
	CreatedBy UNIQUEIDENTIFIER NOT NULL, -- THE USER THAT CREATED THE DISPLAY NAME
	ObsoletionTime DATETIME2, -- WHEN PRESENT REPRESENTS THE TIME THE RECORD WAS OBSOLETE
	ObsoletedBy UNIQUEIDENTIFIER, -- THE USER WHO OBSOLETED THIS RECORD
	ObsoletionReason VARCHAR(MAX), -- WHEN PRESENT INDICATES WHY THE RECORD WAS OBSOLETED
	PhoneticCode VARCHAR(20) NOT NULL, -- THE PHONETIC CODE 
	PhoneticAlgorithmId NUMERIC(2) NOT NULL, -- THE ALGORITHM USED TO GENERATE THE CODE
	CONSTRAINT PK_ReferenceTermDisplayName PRIMARY KEY (ReferenceTermDisplayNameId),
	CONSTRAINT FK_ReferenceTermDisplayNameReferenceTermId FOREIGN KEY (ReferenceTermId) REFERENCES ReferenceTerm(ReferenceTermId),
	CONSTRAINT FK_ReferenceTermCreatedBy FOREIGN KEY (CreatedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ReferenceTermObsoletedBy FOREIGN KEY (ObsoletedBy) REFERENCES SecurityUser(UserId),
	CONSTRAINT FK_ReferenceTermPhoneticAlgorithmId FOREIGN KEY (PhoneticAlgorithmId) REFERENCES PhoneticAlgorithm(PhoneticAlgorithmId),
	CONSTRAINT CK_ReferenceTermObsoletedBy CHECK(ObsoletedBy IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletedBy IS NULL AND ObsoletionTime IS NULL),
	CONSTRAINT CK_ReferenceTermObsoletionReason  CHECK(ObsoletionReason IS NOT NULL AND ObsoletionTime IS NOT NULL OR ObsoletionTime IS NULL AND ObsoletionReason IS NULL)
);

CREATE INDEX ReferenceTermDisplayNamePhoneticIdx ON ReferenceTermDisplayName(PhoneticCode, PhoneticAlgorithmId);
CREATE INDEX ReferenceTermDisplayNameNameIdx ON ReferenceTermDisplayName(Name);

CREATE TABLE ConceptRelationship
(
	ConceptRelationshipId NUMERIC(10) IDENTITY NOT NULL, -- THE UNIQUE IDENTIFIER FOR THE CONCEPT RELATIONSHIP
	SourceConceptId NUMERIC(10) NOT NULL, -- THE SOURCE OF THE CONCEPT RELATIONSHIP
	TargetConceptId NUMERIC(10) NOT NULL, -- THE TARGET OF THE RELATIONSHIP
	RelationshipTypeId NUMERIC(2) NOT NULL, -- THE TYPE OF RELATIONSHIP
	EffectiveVersionId NUMERIC(10) NOT NULL, -- THE VERSION OF THE CONCEPT TO WHICH THE SOURCE RELATION APPLIES
	ObsoleteVersionId NUMERIC(10) NOT NULL, -- THE VERSION OF THE CONCEPT WHEN THE RELATION IS NO LONGER VALID
	CONSTRAINT PK_ConceptRelationship PRIMARY KEY (ConceptRelationshipId),
	CONSTRAINT FK_ConceptRelationshipSourceConceptId FOREIGN KEY (SourceConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_ConceptRelationshipTargetConceptId FOREIGN KEY (TargetConceptId) REFERENCES Concept(ConceptId),
	CONSTRAINT FK_ConceptRelationshipRelationshipTypeId FOREIGN KEY (RelationshipTypeId) REFERENCES ConceptRelationshipType(ConceptRelationshipTypeId),
	CONSTRAINT FK_ConceptRelationshipEffectiveVersionId FOREIGN KEY (EffectiveVersionId) REFERENCES ConceptVersion(ConceptVersionId),
	CONSTRAINT FK_ConceptRelationshpObsoleteVersionId FOREIGN KEY (ObsoleteVersionId) REFERENCES ConceptVersion(ConceptVersionId)
);

CREATE ConceptRelationshipSourceIdx ON ConceptRelationship(SourceConceptId);
CREATE ConceptRelationshipTargetIdx ON ConceptRelationship(TargetConceptId);
